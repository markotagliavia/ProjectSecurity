using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;


namespace SecurityManager
{

    class GennerateRsaKey
    {
        private int keySize;

        public GennerateRsaKey(int size)
        {
            keySize = size;
        }

        public sealed class SessionKey
        {
            public Guid Id;
            public byte[] SymmetricKey;
            public RSAParameters PublicKey;
            public RSAParameters PrivateKey;
        }


        private Dictionary<Guid, SessionKey> sessionKeys;

        public Dictionary<Guid, SessionKey> SessionKeys
        {
            get { return sessionKeys; }
            set { sessionKeys = value; }
        }


        public RSAParameters Generate(Guid sessionId)
        {
            // NOTE: Make the key size configurable.
            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(keySize))
            {
                SessionKey s = new SessionKey()
                {
                    Id = sessionId,
                    PublicKey = rsa.ExportParameters(false /* no private key info */),
                    PrivateKey = rsa.ExportParameters(true /* with private key info */),
                    SymmetricKey = null, // To be generated by the client.
                };

                sessionKeys.Add(Guid.NewGuid(), s);

                return s.PublicKey;
            }
        }

        public void SetSymmetricKey(Guid id, byte[] encryptedKey)
        {
            SessionKey session = sessionKeys[id];

            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
            {
                rsa.ImportParameters(session.PrivateKey);
                session.SymmetricKey = rsa.Decrypt(encryptedKey, true);
            }
        }
    }
}
